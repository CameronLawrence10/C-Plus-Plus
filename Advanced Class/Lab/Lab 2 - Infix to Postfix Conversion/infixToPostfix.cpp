/*
 * Name: Cameron Lawrence
 * Date Submitted: Feb 6
 * Lab Section: 003
 * Assignment Name: Infix To Postfix
 */
#include <iostream>
#include <string>
#include <stack>
using namespace std;

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols


//Order of Operations is in correct order based off of comments from starter code above
int OrderOp(string symbol) {
    int num;

    if (symbol == "+" || symbol == "-" ) {
        num = 1;
    }
        else if  (symbol == "*" || symbol == "/" || symbol == "%") {
            num = 2;  
        }
            else {
                num = -1; 
            }
    return num;
}

//checking for parentheses order
int Parenthesis(string infix[], int length) {
    int num = 0;    
    int count = 0;   
    
    
    for (int i=0; i <= length; i++) {
        if (infix[i] == ")") {
            count--;
        }
            else if (infix[i] == "(") {
                count++;
            }
        if (count != 0) {
            num = 0;        
        }
            else {
            num = length;   
            }
    }
    return num;
}

//Converts an infix arithmetic expression into postfix dependable on operator symbols 
int infixToPostfix(string infix[], int length, string postfix[]) {
    int count1 = 0;    
    int count2 = 0;
    int run = 0; 
    int num = Parenthesis(infix, length);
    
    if (num > 15) {
        num = 15;
    }

    stack <string> opStack;
    opStack.push("|");

    //looping until lnegth is equal to i
    for(int i = 0; i < length; i++) {

        //is digit to check wether character is digit or not 
        if(isdigit(infix[i][0])) {
            postfix[count1++] = infix[i];
        }

            //if the character is equal to a closed paranthese, while loop is for the end or a parathense
            else if (infix[i][0] == ')') {
                //while the whole stack is not empty do this.....
                while(opStack.top()[0] != '|' && opStack.top()[0] != '(') {
                    //setting to increased value
                    string increase = opStack.top();
                    //pop / remove value
                    opStack.pop();
                    postfix[count1++] = increase;
                    
                }
                //increment
                count2++;
                run++;
                string zero = opStack.top();
                if (zero[0] == '(') {
                    opStack.pop();
                }
            }
            else if (infix[i] == "(") {
                opStack.push(infix[i]);
                count2++;
            }
                else {
                    while (!(opStack.empty())) {
                        if (opStack.top()[0] != '|' && OrderOp(infix[i]) <= OrderOp(opStack.top()) ) {
                                //pop / remove value
                                string increase = opStack.top();    
                                //pop /remove value
                                opStack.pop();                  
                                postfix[count1++] = increase;      
                            } 
                                //break to make sure everything is ended
                                else {
                                    break;
                                }
                            
                    }
                    opStack.push(infix[i]);
        }
    }

    for (count1 = count1; count1 < (length - count2); count1++) {
        postfix[count1] = opStack.top();  
        opStack.pop();  
    }

    return num;
}




/*int main() {
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(", "5", "-", "6", "+", "7", ")", "*","8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
} */